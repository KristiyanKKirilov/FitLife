@model AllEventsQueryModel
@inject ITrainerService trainerService
<link rel="stylesheet" href="~/css/TrainingProgramAll.css" />

@{
    ViewBag.Title = "Events";
}

<div class="header ">
    <h2 class="text-center">@ViewBag.Title</h2>
    @if (await trainerService.ExistsByIdAsync(User.Id()))
    {
        <a class="btn-add" asp-controller="Event" asp-action="Add">+</a>
    }
</div>

@if (!Model.Events.Any())
{
    <h2 class="text-center">No Events found by the given criteria!</h2>
}

<form method="get">
    <div class="row">
        <div class="form-group col-md-3 d-flex justify-content-between">
            <div class="form-group">
                <label asp-for="Category"></label>
                <select asp-for="Category" class="form-control">
                    <option value="">All</option>
                    @foreach (var category in Model.Categories)
                    {
                        <option value="@category">@category</option>
                    }
                </select>
            </div>
        </div>

        <div class="form-group col-md-3">
            <label asp-for="SearchTerm" ></label>
            <input asp-for="SearchTerm" class="form-control" placeholder="...">
        </div>

        <div class="form-group col-md-3">
            <div class="form-group">
                <label asp-for="Sorting"></label>
                <select asp-for="Sorting" class="form-control">
                    <option value="0">MostRecent</option>
                    <option value="1">UpComing Events</option>
                    <option value="2">Events In Your Town First</option>
                </select>
            </div>
        </div>

        <div class="col-md-3">
            <div class="form-group mt-4 p-2">
                <input type="submit" value="Search" class="btn btn-primary" />
            </div>
        </div>
    </div>
</form>


<div class="row">
    @foreach (var currentEvent in Model.Events)
    {
        <partial name="_EventPartial" model="@currentEvent" />
    }
</div>

@{
    var previousPage = Model.CurrentPage - 1;
    if (previousPage < 1)
    {
        previousPage = 1;
    }

    var maxPage = Math.Ceiling((double)Model.TotalEventsCount /
        Model.EventsPerPage);
}
<div class="buttons">
    <section class="field">
        <a class="btn-page @(Model.CurrentPage == 1 ? "disabled" : string.Empty)"
           asp-controller="Event"
           asp-action="All"
           asp-route-currentPage="@previousPage"><<</a>
        @{
            var shouldButtonBeDisabled = Model.CurrentPage == maxPage ||
            !Model.Events.Any();
        }
    </section>
    <section class="field">
        <span class="btn-page">@(Model.CurrentPage)</span>
    </section>
    <section class="field">
        <a class="btn-page
           @(shouldButtonBeDisabled ? "disabled" : string.Empty)"
           asp-controller="Event"
           asp-action="All"
           asp-route-currentPage="@(Model.CurrentPage + 1)">>></a>
        </>
    </section>
</div>


