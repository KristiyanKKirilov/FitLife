@model AllTrainingProgramsQueryModel
@inject ITrainerService trainerService
<link rel="stylesheet" href="~/css/TrainingProgramAll.css" />

@{
    ViewBag.Title = "Training Programs";
}
 <div class="header ">
        <h2 class="text-center">@ViewBag.Title</h2>
        @if (await trainerService.ExistsByIdAsync(User.Id()))
        {
            <a class="btn-add" asp-controller="TrainingProgram" asp-action="Add">+</a>
        }
</div>
   

@if (!Model.TrainingPrograms.Any())
{
    <h2 class="text-center">No training programs found by the given criteria!</h2>
}

<div class="row">
    @foreach (var trainingProgram in Model.TrainingPrograms)
    {
        <partial name="_TrainingProgramPartial" model="@trainingProgram" />
    }
</div>

@{
    var previousPage = Model.CurrentPage - 1;
    if (previousPage < 1)
    {
        previousPage = 1;
    }

    var maxPage = Math.Ceiling((double)Model.TotalTrainingProgramsCount /
        Model.TrainingProgramsPerPage);
}
<div class="buttons">   
    <section class="field">
        <a class="btn-page @(Model.CurrentPage == 1 ? "disabled" : string.Empty)"
           asp-controller="TrainingProgram"
           asp-action="All"
           asp-route-currentPage="@previousPage"><<</a>
        @{
            var shouldButtonBeDisabled = Model.CurrentPage == maxPage ||
            !Model.TrainingPrograms.Any();
        }
    </section>      
    <section class="field">
        <span class="btn-page">@(Model.CurrentPage)</span>
    </section>
     <section class="field">
        <a class="btn-page
           @(shouldButtonBeDisabled ? "disabled" : string.Empty)"
           asp-controller="TrainingProgram"
           asp-action="All"
           asp-route-currentPage="@(Model.CurrentPage + 1)">>></a>
        </>
    </section>               
</div>
