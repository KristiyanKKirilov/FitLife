// <auto-generated />
using System;
using FitLife.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FitLife.Data.Migrations
{
    [DbContext(typeof(FitLifeDbContext))]
    partial class FitLifeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FitLife.Data.Models.Event", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Event's identifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Event's address in detail described");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasComment("Event's category identifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("Event's city");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Event's creator identifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Event's description");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Event's image url");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2")
                        .HasComment("Event's start time in format dd/MM/yyyy hh:mm");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Event's title");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Events");

                    b.HasComment("Events");

                    b.HasData(
                        new
                        {
                            Id = "5526ab8f-3107-4466-a27b-463fb35ad0e9",
                            Address = "At the beginning of the sea garden, Varna",
                            CategoryId = 1,
                            City = "Varna",
                            CreatorId = "5525ab8f-3107-4466-a27b-463fb35ad0eo",
                            Description = "Starting our run together at 7 oclock in the central park. Prepare yourself with comfortable shoes and big smile. The run will be 3km long and if it is needed, we will take a break and then continue our training!",
                            ImageUrl = "https://hips.hearstapps.com/hmg-prod/images/running-is-one-of-the-best-ways-to-stay-fit-royalty-free-image-1036780592-1553033495.jpg?crop=0.88976xw:1xh;center,top&resize=1200:*",
                            StartTime = new DateTime(2024, 4, 12, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Morning Run"
                        },
                        new
                        {
                            Id = "1525ab8f-3107-4466-a27b-463fb35ad0e9",
                            Address = "street. Bulgaria",
                            CategoryId = 2,
                            City = "Sofia",
                            CreatorId = "5525ab80-3107-4466-a27b-463fb35ad0eo",
                            Description = "Seminar at the new business building in Sofia, we are going to discuss calorie deficit and proper training program depending on everyone's lifestyle! Don't be shy to participate and help us improve our seminars! We are waiting for you!",
                            ImageUrl = "https://images.squarespace-cdn.com/content/v1/5e113e254eae7b30460a0fba/1585970390295-ASEJJYD8ZYPY28IO48SE/IMG_6324.jpg",
                            StartTime = new DateTime(2024, 4, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Healthy Food"
                        },
                        new
                        {
                            Id = "f4130617-4f66-4775-8c6a-e80be1ea8380",
                            Address = "Varna Center, near Starbucks",
                            CategoryId = 3,
                            City = "Varna",
                            CreatorId = "5525ab8f-3107-4466-a27b-463fb35ad0eo",
                            Description = "Get a coffee and meet a new friend in our new designed healthy bar food!",
                            ImageUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRnrnGh9dQ-ktCzYC-Bxd0ixhza-1uaa7xU2a1V6nKK4g&s",
                            StartTime = new DateTime(2024, 9, 5, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Coffee Time and Relax"
                        });
                });

            modelBuilder.Entity("FitLife.Data.Models.EventCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Event category's identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Event category's name");

                    b.HasKey("Id");

                    b.ToTable("EventCategories");

                    b.HasComment("EventCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sport"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Seminar"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Entertainment"
                        });
                });

            modelBuilder.Entity("FitLife.Data.Models.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Order identifier");

                    b.Property<string>("ParticipantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Order's participant identifier");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Order's total price");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId");

                    b.ToTable("Orders");

                    b.HasComment("Orders");
                });

            modelBuilder.Entity("FitLife.Data.Models.Participant", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("Participant's living town");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Participant's first name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Participant's last name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasComment("Participants");

                    b.HasData(
                        new
                        {
                            Id = "dea12856-c198-4129-b3f3-b893d8395082",
                            AccessFailedCount = 0,
                            City = "Sofia",
                            ConcurrencyStamp = "50275506-2909-4aef-84ee-8fe7faa1a1e9",
                            Email = "first@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Tom",
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            NormalizedEmail = "first@gmail.com",
                            NormalizedUserName = "first@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAENbKKS0lRwWiL8hVYD7u1AtyDZXGdaY9JgxA1Rrvf2KNCfPpla/9O0i2hXOjpizY+Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6cbe5f7b-d3af-4f10-b9db-be6db9dd18eb",
                            TwoFactorEnabled = false,
                            UserName = "first@gmail.com"
                        },
                        new
                        {
                            Id = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e",
                            AccessFailedCount = 0,
                            City = "Varna",
                            ConcurrencyStamp = "719c92ec-f3f9-4ccc-b26c-51882097fe16",
                            Email = "second@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Freddy",
                            LastName = "Philips",
                            LockoutEnabled = false,
                            NormalizedEmail = "second@gmail.com",
                            NormalizedUserName = "second@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEHg/aVUoNJ0NC8liykkKTIq6r6obgZxZ+nWLb/v2MLLsPVY2mWNpM3h5t9eA/UAe6Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c010f836-4ea1-4444-9788-3c89db27d167",
                            TwoFactorEnabled = false,
                            UserName = "second@gmail.com"
                        },
                        new
                        {
                            Id = "ad1cc9c3-9fda-440a-a729-1baa02aef94d",
                            AccessFailedCount = 0,
                            City = "Ruse",
                            ConcurrencyStamp = "5e0f06f8-ecec-49f2-968e-0a34728516c0",
                            Email = "third@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Chris",
                            LastName = "Stevens",
                            LockoutEnabled = false,
                            NormalizedEmail = "THIRD@GMAIL.COM",
                            NormalizedUserName = "THIRD@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPf3sjW5iTEB+JS/9Si8Lzs3IZT1hRtg4pW/7kv9LejxeS6bZAUZyDorSsE0h8KFvg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "79c59180-f206-4834-a6b0-7446d9fb65c3",
                            TwoFactorEnabled = false,
                            UserName = "third@gmail.com"
                        },
                        new
                        {
                            Id = "e04b5ff6-29e7-44d5-9b3b-0099d18debd7",
                            AccessFailedCount = 0,
                            City = "SOFIA",
                            ConcurrencyStamp = "03d795d7-7d17-4d19-9f64-bf96d10ae078",
                            Email = "test@softuni.bg",
                            EmailConfirmed = false,
                            FirstName = "TEST",
                            LastName = "SOFTUNI",
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST@SOFTUNI.BG",
                            NormalizedUserName = "TEST@SOFTUNI.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEN1Jrlwk/2oZR4GkZ5Q9esxgKpZqgXErdH0vA39fHJyTQYZyzZaEgTEnIKFZ/rjkyg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dfc6affe-2506-4065-90ac-c4b8311b118e",
                            TwoFactorEnabled = false,
                            UserName = "test@softuni.bg"
                        });
                });

            modelBuilder.Entity("FitLife.Data.Models.ParticipantEvent", b =>
                {
                    b.Property<string>("ParticipantId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Participant's identifier");

                    b.Property<string>("EventId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Event's identifier");

                    b.HasKey("ParticipantId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("ParticipantEvent");

                    b.HasComment("ParticipantsEvents");
                });

            modelBuilder.Entity("FitLife.Data.Models.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Product's identifier");

                    b.Property<int>("AvailableStockCount")
                        .HasColumnType("int")
                        .HasComment("Product's available count in storage");

                    b.Property<int>("Count")
                        .HasColumnType("int")
                        .HasComment("Product's count in a participant's order");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Product's nutrition described");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Product's image url");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit")
                        .HasComment("Product's state");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Product's name");

                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Product's price");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Products");

                    b.HasComment("Products");

                    b.HasData(
                        new
                        {
                            Id = "eea12856-c198-4129-b3f3-b893d8395022",
                            AvailableStockCount = 250,
                            Count = 1,
                            Description = "30g of protein, 230 calories",
                            ImageUrl = "https://www.wellplated.com/wp-content/uploads/2018/04/Peanut-Butter-Protein-Cookies.jpg",
                            IsAvailable = true,
                            Name = "Protein cookie",
                            Price = 3.20m
                        },
                        new
                        {
                            Id = "dea12856-c198-4129-b3f3-b803d8395022",
                            AvailableStockCount = 100,
                            Count = 1,
                            Description = "Ideal for diets, 0% sugar, 30 calories per 100g",
                            ImageUrl = "https://cdn.shopify.com/s/files/1/2090/1141/files/bepure-perfect-plant-protein-chocolate-flavour-600g-jar_3125x.png?v=1690512984",
                            IsAvailable = true,
                            Name = "Sugarfree chocolate",
                            Price = 12m
                        },
                        new
                        {
                            Id = "d2a12856-c198-4129-b3f3-b803d8395022",
                            AvailableStockCount = 50,
                            Count = 1,
                            Description = "Refreshing drink, 100% natural flavour, 0% sugar, 230 calories",
                            ImageUrl = "https://smartymockups.com/wp-content/uploads/2019/05/Smoothie_Bottle_Mockup_2.jpg",
                            IsAvailable = true,
                            Name = "Strawberry smoothie",
                            Price = 7m
                        });
                });

            modelBuilder.Entity("FitLife.Data.Models.Trainer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Trainer's identifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Trainer's email address");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Trainer's first name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Trainer's last name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Trainer's user identifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Trainers");

                    b.HasComment("Trainers");

                    b.HasData(
                        new
                        {
                            Id = "5525ab8f-3107-4466-a27b-463fb35ad0eo",
                            Email = "first@gmail.com",
                            FirstName = "Tom",
                            LastName = "Johnson",
                            UserId = "dea12856-c198-4129-b3f3-b893d8395082"
                        },
                        new
                        {
                            Id = "5525ab80-3107-4466-a27b-463fb35ad0eo",
                            Email = "second@gmail.com",
                            FirstName = "Freddy",
                            LastName = "Philips",
                            UserId = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e"
                        });
                });

            modelBuilder.Entity("FitLife.Data.Models.TrainingProgram", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Training program's identifier");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasComment("Training program's category identifier");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Training program's creator");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Training program's description");

                    b.Property<int>("DurationDays")
                        .HasColumnType("int")
                        .HasComment("Training program's duration in days");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Training program's image url");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasComment("Training program's date of start in format dd/MM/yyyy hh:mm");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Training program's title");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorId");

                    b.ToTable("TrainingPrograms");

                    b.HasComment("TrainingPrograms");

                    b.HasData(
                        new
                        {
                            Id = "dea11856-c198-4129-b3f3-a893d8395022",
                            CategoryId = 2,
                            CreatorId = "5525ab8f-3107-4466-a27b-463fb35ad0eo",
                            Description = "Burpies and jumping jacks to do in the morning and 20 minutes cardio afternoon are only the begining. Join us to be fit for the summer!",
                            DurationDays = 14,
                            ImageUrl = "https://media.istockphoto.com/id/637772834/photo/set-your-fitness-goals-high-and-reach-them.jpg?s=612x612&w=0&k=20&c=w0ZkUVwEOm6AUJO8eGqxeHt-Jrx5us5uK4BfWW9HDy8=",
                            StartDate = new DateTime(2024, 9, 8, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Jumping Month"
                        },
                        new
                        {
                            Id = "dea22856-c198-4129-b3f3-a893d8395022",
                            CategoryId = 3,
                            CreatorId = "5525ab8f-3107-4466-a27b-463fb35ad0eo",
                            Description = "Gym is your second home and you want to achieve even more? Subscribe for our program to become better version of yourself only for 3 months!",
                            DurationDays = 90,
                            ImageUrl = "https://img.freepik.com/free-photo/low-angle-view-unrecognizable-muscular-build-man-preparing-lifting-barbell-health-club_637285-2497.jpg?size=626&ext=jpg&ga=GA1.1.1700460183.1712793600&semt=sph",
                            StartDate = new DateTime(2024, 4, 22, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Mass gain"
                        },
                        new
                        {
                            Id = "dd87ea80-b2fe-4034-aa6a-63d505837a15",
                            CategoryId = 1,
                            CreatorId = "5525ab8f-3107-4466-a27b-463fb35ad0eo",
                            Description = "Beach training every afternoon to get 6 pack for the summer!",
                            DurationDays = 7,
                            ImageUrl = "https://thumbs.dreamstime.com/b/fitness-people-jumping-fitness-workout-beach-group-fitness-people-jumping-fitness-workout-beach-192257084.jpg",
                            StartDate = new DateTime(2024, 6, 21, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Summer body"
                        },
                        new
                        {
                            Id = "8bb2f74c-dde5-4217-b985-0f623ec4349f",
                            CategoryId = 2,
                            CreatorId = "5525ab8f-3107-4466-a27b-463fb35ad0eo",
                            Description = "Be prepared for the montains in Bulgaria every year!",
                            DurationDays = 7,
                            ImageUrl = "https://i.namu.wiki/i/z4SlzF00Hi7dzXpkkj_mdNnXyY2WTHD6hmxzCks5e6PxQ7KwHosVlzQatl42tPiui_EICYUhL-iEBxxbRQUN7w.webp",
                            StartDate = new DateTime(2024, 1, 20, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Rock Climbers"
                        },
                        new
                        {
                            Id = "dea22806-c198-4129-b3f3-a893d8395022",
                            CategoryId = 2,
                            CreatorId = "5525ab8f-3107-4466-a27b-463fb35ad0eo",
                            Description = "Summer swim trainings for people with a little bit of experience. We will teach you some techniques to improve your swimming skills.",
                            DurationDays = 28,
                            ImageUrl = "https://media.istockphoto.com/id/465383082/photo/female-swimmer-at-the-swimming-pool.webp?b=1&s=612x612&w=0&k=20&c=I4TM5zIDe-19EWq6OlzwZ1eqr8_tlEQ86SC-0eomEhU=",
                            StartDate = new DateTime(2024, 7, 19, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Swim like a pro"
                        },
                        new
                        {
                            Id = "dd87ea99-b2fe-4034-aa6a-63d505837a15",
                            CategoryId = 2,
                            CreatorId = "5525ab8f-3107-4466-a27b-463fb35ad0eo",
                            Description = "Crossfit gives you the opportunity to look good, feel good and train different from others. If you are bored from the gym and you are looking to start some new challenge, our crossfit program is the right place for you!",
                            DurationDays = 60,
                            ImageUrl = "https://www.crossfit.com/wp-content/uploads/2023/11/13131232/crossfit-coach-led-fitness-training-adapted-for-you-handstand-hold.jpg",
                            StartDate = new DateTime(2024, 11, 5, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Strong and flexible"
                        });
                });

            modelBuilder.Entity("FitLife.Data.Models.TrainingProgramCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("TrainingProgram category's identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("TrainingProgram category's name");

                    b.HasKey("Id");

                    b.ToTable("TrainingProgramCategories");

                    b.HasComment("TrainingProgramCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Beginner"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Intermediate"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Expert"
                        });
                });

            modelBuilder.Entity("FitLife.Data.Models.TrainingProgramParticipant", b =>
                {
                    b.Property<string>("ParticipantId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Participant's identifier");

                    b.Property<string>("TrainingProgramId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Training program's identifier");

                    b.HasKey("ParticipantId", "TrainingProgramId");

                    b.HasIndex("TrainingProgramId");

                    b.ToTable("TrainingProgramParticipant");

                    b.HasComment("TrainingProgramsParticipants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FitLife.Data.Models.Event", b =>
                {
                    b.HasOne("FitLife.Data.Models.EventCategory", "Category")
                        .WithMany("Events")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FitLife.Data.Models.Trainer", "Creator")
                        .WithMany("Events")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("FitLife.Data.Models.Order", b =>
                {
                    b.HasOne("FitLife.Data.Models.Participant", "Participant")
                        .WithMany("Orders")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("FitLife.Data.Models.ParticipantEvent", b =>
                {
                    b.HasOne("FitLife.Data.Models.Event", "Event")
                        .WithMany("ParticipantsEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FitLife.Data.Models.Participant", "Participant")
                        .WithMany("ParticipantsEvents")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("FitLife.Data.Models.Product", b =>
                {
                    b.HasOne("FitLife.Data.Models.Order", null)
                        .WithMany("Products")
                        .HasForeignKey("OrderId");
                });

            modelBuilder.Entity("FitLife.Data.Models.Trainer", b =>
                {
                    b.HasOne("FitLife.Data.Models.Participant", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitLife.Data.Models.TrainingProgram", b =>
                {
                    b.HasOne("FitLife.Data.Models.TrainingProgramCategory", "Category")
                        .WithMany("TrainingPrograms")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FitLife.Data.Models.Trainer", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("FitLife.Data.Models.TrainingProgramParticipant", b =>
                {
                    b.HasOne("FitLife.Data.Models.Participant", "Participant")
                        .WithMany("TrainingProgramsParticipants")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FitLife.Data.Models.TrainingProgram", "TrainingProgram")
                        .WithMany("TrainingProgramsParticipants")
                        .HasForeignKey("TrainingProgramId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Participant");

                    b.Navigation("TrainingProgram");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FitLife.Data.Models.Participant", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FitLife.Data.Models.Participant", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitLife.Data.Models.Participant", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FitLife.Data.Models.Participant", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FitLife.Data.Models.Event", b =>
                {
                    b.Navigation("ParticipantsEvents");
                });

            modelBuilder.Entity("FitLife.Data.Models.EventCategory", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("FitLife.Data.Models.Order", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("FitLife.Data.Models.Participant", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("ParticipantsEvents");

                    b.Navigation("TrainingProgramsParticipants");
                });

            modelBuilder.Entity("FitLife.Data.Models.Trainer", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("FitLife.Data.Models.TrainingProgram", b =>
                {
                    b.Navigation("TrainingProgramsParticipants");
                });

            modelBuilder.Entity("FitLife.Data.Models.TrainingProgramCategory", b =>
                {
                    b.Navigation("TrainingPrograms");
                });
#pragma warning restore 612, 618
        }
    }
}
